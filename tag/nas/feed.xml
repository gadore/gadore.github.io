<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.gadore.top</id>
    <title>千里之豪的格物垛 • Posts by &#34;nas&#34; tag</title>
    <link href="https://blog.gadore.top" />
    <updated>2024-12-19T10:51:03.000Z</updated>
    <category term="旅行" />
    <category term="日本" />
    <category term="手机" />
    <category term="程序员" />
    <category term="动漫" />
    <category term="AI" />
    <category term="刷机" />
    <category term="Pixel 5" />
    <category term="LineageOS" />
    <category term="NAS" />
    <category term="相册" />
    <category term="网络" />
    <category term="iPhone" />
    <category term="产品" />
    <category term="独立开发" />
    <category term="iOS" />
    <category term="SwiftUI" />
    <category term="像素风" />
    <category term="安全" />
    <category term="博客" />
    <category term="公租房" />
    <category term="生活" />
    <category term="Swift" />
    <category term="腕表" />
    <category term="游戏" />
    <category term="PCB" />
    <category term="树莓派" />
    <category term="嘉立创" />
    <entry>
        <id>https://blog.gadore.top/archives/immich-experience/</id>
        <title>Immich 相册管理系统使用体验分享</title>
        <link rel="alternate" href="https://blog.gadore.top/archives/immich-experience/"/>
        <content type="html">&lt;p&gt;自从群晖更新了 DSM 7.2 之后，官方就默认移除了 Video Station 套件，我惊讶于这一更新给我造成的不便（没错，我在用 VS 套件，怎样），开始翻阅群晖的更新日志，这不翻不知道，群晖居然要去掉整个 NAS 的解码功能，虽然说 NAS 的机能是不强吧，但我买的 920+ 的性能是够用的啊！导致现在我在浏览器看照片需要安装一个解码插件才能看，在手机端看照片也要打开一个 “图片助手” 才能正常看。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Version: 7.2.2-72806 (2024-09-11) 注意事项……&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自此版本起，使用 HEVC (H.265)、AVC (H.264) 和 VC-1 编解码器处理多媒体文件的负载，将从服务器端转移至终端设备，以减少系统不必要的资源占用，从而提升效能。 这些编解码器在智能手机、平板、计算机、智能电视等终端设备上已广泛支持。如果终端设备不支持所需的编解码器，媒体文件的使用可能会受到限制。&lt;/strong&gt; 关于替代方案，请参阅……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Video Station 已经不能用了，相册这样恶心我一下，鬼知道群晖哪天会像砍 Video Station 一样把相册也砍掉。而且这样的相册系统我也不想再用了，索性直接寻找两套解决方案，视频托管解决方案和图片托管解决方案。&lt;/p&gt;
&lt;p&gt;视频套件自不必多说，Jellyfin。本篇文章暂不展开。&lt;/p&gt;
&lt;p&gt;我本次想分享一下关于我部署和使用图片托管服务的相关使用体验。&lt;/p&gt;
&lt;h2 id=&#34;Immich：自托管相册视频管理解决方案&#34;&gt;&lt;a href=&#34;#Immich：自托管相册视频管理解决方案&#34; class=&#34;headerlink&#34; title=&#34;Immich：自托管相册视频管理解决方案&#34;&gt;&lt;/a&gt;Immich：自托管相册视频管理解决方案&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://immich.app/assets/images/feature-panel-286c220a4bdfd8a0a9a3abc45c47a600.webp&#34; alt=&#34;Immich&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;官网：&lt;a href=&#34;https://immich.app/&#34;&gt;Immich&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;体验：&lt;a href=&#34;https://demo.immich.app/auth/login&#34;&gt;Demo Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;客户端支持：网页端、Android、iOS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;官网有非常详细的文档指引，如果你对于英文文档的阅读有不便的话，还可以参考 &lt;a href=&#34;https://www.himiku.com/archives/immich.html&#34;&gt;初之音&lt;/a&gt; 的这篇教程，你会拥有更好的阅读体验。&lt;/p&gt;
&lt;h2 id=&#34;Immich-的优势&#34;&gt;&lt;a href=&#34;#Immich-的优势&#34; class=&#34;headerlink&#34; title=&#34;Immich 的优势&#34;&gt;&lt;/a&gt;Immich 的优势&lt;/h2&gt;&lt;h3 id=&#34;不需要安装浏览器插件，或者开启手机的图像助手，才能查看照片缩略图&#34;&gt;&lt;a href=&#34;#不需要安装浏览器插件，或者开启手机的图像助手，才能查看照片缩略图&#34; class=&#34;headerlink&#34; title=&#34;不需要安装浏览器插件，或者开启手机的图像助手，才能查看照片缩略图&#34;&gt;&lt;/a&gt;不需要安装浏览器插件，或者开启手机的图像助手，才能查看照片缩略图&lt;/h3&gt;&lt;p&gt;（点你呢，群晖！）&lt;/p&gt;
&lt;h3 id=&#34;使用-Flutter-开发客户端，双端拥有一致的使用体验&#34;&gt;&lt;a href=&#34;#使用-Flutter-开发客户端，双端拥有一致的使用体验&#34; class=&#34;headerlink&#34; title=&#34;使用 Flutter 开发客户端，双端拥有一致的使用体验&#34;&gt;&lt;/a&gt;使用 Flutter 开发客户端，双端拥有一致的使用体验&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://immich.app/img/screenshot-light.webp&#34; alt=&#34;Immich&#34;&gt;&lt;br&gt;Flutter 更为现代化的 UI 组建，特性也双端同步更新。&lt;/p&gt;
&lt;h3 id=&#34;集成图形识别模型，可以根据模型运行人脸识别和相似图片去重&#34;&gt;&lt;a href=&#34;#集成图形识别模型，可以根据模型运行人脸识别和相似图片去重&#34; class=&#34;headerlink&#34; title=&#34;集成图形识别模型，可以根据模型运行人脸识别和相似图片去重&#34;&gt;&lt;/a&gt;集成图形识别模型，可以根据模型运行人脸识别和相似图片去重&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/upload/immich-machine-learning.png&#34;&gt;&lt;br&gt;这个计算时间较长，跟设备的计算性能有关，如果有条件的话可以在更强的设备上运行。&lt;/p&gt;
&lt;h3 id=&#34;存储模板可以帮我整理杂乱的群晖相册结构&#34;&gt;&lt;a href=&#34;#存储模板可以帮我整理杂乱的群晖相册结构&#34; class=&#34;headerlink&#34; title=&#34;存储模板可以帮我整理杂乱的群晖相册结构&#34;&gt;&lt;/a&gt;存储模板可以帮我整理杂乱的群晖相册结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/upload/photoStructure.png&#34;&gt;&lt;br&gt;使用过群晖相册的都知道，群晖的整理就是没有整理。&lt;br&gt;&lt;img src=&#34;https://immich.app/assets/images/storage-template-5504da62979bf2d9e40a94d898b54388.webp&#34;&gt;&lt;br&gt;可以自定义存储模板。&lt;/p&gt;
&lt;h3 id=&#34;非常便捷的图库迁移工具链，可以通过命令行快速迁移&#34;&gt;&lt;a href=&#34;#非常便捷的图库迁移工具链，可以通过命令行快速迁移&#34; class=&#34;headerlink&#34; title=&#34;非常便捷的图库迁移工具链，可以通过命令行快速迁移&#34;&gt;&lt;/a&gt;非常便捷的图库迁移工具链，可以通过命令行快速迁移&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/upload/immichCLI.webp&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Immich-的问题&#34;&gt;&lt;a href=&#34;#Immich-的问题&#34; class=&#34;headerlink&#34; title=&#34;Immich 的问题&#34;&gt;&lt;/a&gt;Immich 的问题&lt;/h2&gt;&lt;h3 id=&#34;较高的上手门槛（自部署）&#34;&gt;&lt;a href=&#34;#较高的上手门槛（自部署）&#34; class=&#34;headerlink&#34; title=&#34;较高的上手门槛（自部署）&#34;&gt;&lt;/a&gt;较高的上手门槛（自部署）&lt;/h3&gt;&lt;p&gt;自己部署 Immich，你至少需要了解以下知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己实现外部访问&lt;ul&gt;
&lt;li&gt;域名&lt;/li&gt;
&lt;li&gt;公网 IP&lt;/li&gt;
&lt;li&gt;反向代理&lt;/li&gt;
&lt;li&gt;SSL 证书&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一定的玩机经验&lt;ul&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Bash&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;稳定性欠佳&#34;&gt;&lt;a href=&#34;#稳定性欠佳&#34; class=&#34;headerlink&#34; title=&#34;稳定性欠佳&#34;&gt;&lt;/a&gt;稳定性欠佳&lt;/h3&gt;&lt;p&gt;Immich 开源项目仍旧在非常活跃的开发状态，从官方 Roadmap 看，需要等到 2025 年才会推出第一个稳定版。&lt;/p&gt;
&lt;p&gt;我也在近几天的使用中发现了一些问题，比如：当我在移动设备中使用了 Proxy 设置，在 Immich 客户端的 App 中并不会走设备的 Proxy 进行网络请求，导致我在外边请求服务器时经常出现 “Server not reachable” 连接不上服务器的问题。&lt;/p&gt;
&lt;p&gt;把官方的 Flutter 项目的代码拉取到本地 Debug 了一下，排查到 Flutter 的 baseHttpClient 在发起网络请求时，并不会直接使用移动设备的代理，需要在代码里进行判断和覆盖一下才行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/immich-mobile-proxy.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我也在官方的仓库提了 Discussion，希望能被官方看到吧。&lt;/p&gt;
&lt;h2 id=&#34;我的建议&#34;&gt;&lt;a href=&#34;#我的建议&#34; class=&#34;headerlink&#34; title=&#34;我的建议&#34;&gt;&lt;/a&gt;我的建议&lt;/h2&gt;&lt;p&gt;如果你跟我一样，希望找一个能够替代群晖官方图片托管的第三方服务，那 Immich 是值得你关注的，但还不能日用，至少&lt;strong&gt;不是现在&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果你更常用网页的话，那当前版本的 Immich 已经是可以使用的状态了。&lt;/p&gt;
&lt;p&gt;如果你需要同时使用网页和客户端，那 Immich 正式版推出之后，可能更合适。因为它还没有到一个可以正常使用的版本，尤其是客户端。&lt;/p&gt;
</content>
        <category term="程序员" />
        <category term="NAS" />
        <category term="相册" />
        <updated>2024-12-19T10:51:03.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.gadore.top/archives/1701742335478/</id>
        <title>群晖自带的 Let&#39;s Encrypt SSL 证书续签经常抽风？试试这个：ZeroSSL</title>
        <link rel="alternate" href="https://blog.gadore.top/archives/1701742335478/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;在当今信息化高速发展的社会，Https 的重要性不言而喻，所以对于我这种自己部署了很多服务并且要暴露在外网的人来说，维持自己的 ssl 证书是一件非常重要的事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本来一年申请一次 ssl 证书，手动部署一下，我也觉得没什么，直到最近发生了这两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阿里云调整免费证书的有效期，从一年缩短到了三个月（90天）；&lt;/li&gt;
&lt;li&gt;群晖使用 Let‘s Encrypt 进行自动续签服务不稳定，间歇性抽风、校验 80 端口失败等；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-08_09-31-31.webp&#34;&gt;&lt;br&gt;是时候折腾一下了&lt;/p&gt;
&lt;p&gt;本文介绍通过 Zerossl 平台配合 acme.sh 脚本实现 Linux 服务器证书自动申请续签、自动部署的全过程，因本人在互联网查询教程期间，发现网上大部分文章均已经过时，部分官方新特性未在大部分教程中看到，遂开此文章，望帮到更多人。&lt;/p&gt;
&lt;p&gt;如果你有网络条件、设备基础、操作能力，强烈建议你直接参考官方中文指引，毕竟这是实时更新的 wiki ，理论上是不会过期的，也是更加准确的，但如果你命令行操作能力有限，可继续看下去。&lt;/p&gt;
&lt;p&gt;请注意文章时效（2023-12-05）。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;&lt;a href=&#34;#准备工作&#34; class=&#34;headerlink&#34; title=&#34;准备工作&#34;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;因为我主要是以我自己的亲身经历来讲，所以首先要介绍一下我所使用的服务所走的环境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的域名购买自阿里云，现在已将 DNS 解析放到了 Cloudflare ；&lt;/li&gt;
&lt;li&gt;我之前的证书也是阿里云的1年免费证书，包含：根证书、中间证书、私钥；&lt;/li&gt;
&lt;li&gt;阿里云、腾讯云证书都只能提供主域名和一个子域名的证书（www），不提供免费泛域名证书；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1、一个-DNS-解析托管平台，本文以-Cloudflare-为例&#34;&gt;&lt;a href=&#34;#1、一个-DNS-解析托管平台，本文以-Cloudflare-为例&#34; class=&#34;headerlink&#34; title=&#34;1、一个 DNS 解析托管平台，本文以 Cloudflare 为例&#34;&gt;&lt;/a&gt;1、一个 DNS 解析托管平台，本文以 Cloudflare 为例&lt;/h3&gt;&lt;p&gt;你需要一个支持 Api 修改 DNS 记录的域名解析商，例如我上边提到的 Cloudflare ，创建账号，并讲你的域名迁移到这里之后，你就可以继续往下操作了。&lt;/p&gt;
&lt;p&gt;如果你的域名解析服务商是别的平台，比如 GoDaddy、DNSPod 等，也是支持的，不需要迁移到 Cloudflare ，全部支持的列表和操作方法参考 这里（多说一句，其实阿里云也是支持的，但 Cloudflare 有太多好用的特性和功能了）。&lt;/p&gt;
&lt;h3 id=&#34;2、拿到-Cloudflare-操作-Api-的-Key-和需要修改的域名-ID&#34;&gt;&lt;a href=&#34;#2、拿到-Cloudflare-操作-Api-的-Key-和需要修改的域名-ID&#34; class=&#34;headerlink&#34; title=&#34;2、拿到 Cloudflare 操作 Api 的 Key 和需要修改的域名 ID&#34;&gt;&lt;/a&gt;2、拿到 Cloudflare 操作 Api 的 Key 和需要修改的域名 ID&lt;/h3&gt;&lt;p&gt;一般这种自动化操作脚本都是需要 Key 的，因为接口需要对操作进行身份检查，防止坏人修改你的信息，Key 就是证明你身份的东西。&lt;/p&gt;
&lt;h4 id=&#34;Global-Api-Key&#34;&gt;&lt;a href=&#34;#Global-Api-Key&#34; class=&#34;headerlink&#34; title=&#34;Global Api Key&#34;&gt;&lt;/a&gt;Global Api Key&lt;/h4&gt;&lt;p&gt;Cloudflare 的 Globalkey 的位置可以参考这个操作步骤：【登陆】【右上角】 【Myprofile】 【Api Tokens】 【Global Api Key】 ，输入密码，复制这个Key，暂存到本地后边用。&lt;/p&gt;
&lt;h4 id=&#34;Zone-ID&#34;&gt;&lt;a href=&#34;#Zone-ID&#34; class=&#34;headerlink&#34; title=&#34;Zone ID&#34;&gt;&lt;/a&gt;Zone ID&lt;/h4&gt;&lt;p&gt;Zone ID 为你的域名空间ID，加入你有多个域名，那就对应到了多个 Zone ID ，所以需要查询到指定的 Zone ID ，确保修改的是你指定的域名。&lt;/p&gt;
&lt;p&gt;Cloudflare 的 Zone ID 可以通过这种方式查询到：【登陆，如果已登陆，就点击左上角的图标回到主页】【登录后的默认主页，点击你的域名】【进入后，查看右侧，下方】&lt;/p&gt;
&lt;h3 id=&#34;3、使用-ssh-登录到你的主机&#34;&gt;&lt;a href=&#34;#3、使用-ssh-登录到你的主机&#34; class=&#34;headerlink&#34; title=&#34;3、使用 ssh 登录到你的主机&#34;&gt;&lt;/a&gt;3、使用 ssh 登录到你的主机&lt;/h3&gt;&lt;p&gt;请确保你拥有这台主机的 root 账户权限，如果没有，也没关系，证书申请不受影响，证书安装和重启你的服务可能需要你自己想办法了。&lt;/p&gt;
&lt;h3 id=&#34;4、在-Zerossl-创建账号&#34;&gt;&lt;a href=&#34;#4、在-Zerossl-创建账号&#34; class=&#34;headerlink&#34; title=&#34;4、在 Zerossl 创建账号&#34;&gt;&lt;/a&gt;4、在 Zerossl 创建账号&lt;/h3&gt;&lt;p&gt;如果你由于种种原因，没办法执行下边的所有操作，你还可以回到这一步，因为在 Zerossl 官网也可以通过操作网页界面的方式申请到证书，但在网页只能申请到主域名和 www 子域名。&lt;/p&gt;
&lt;p&gt;泛域名要么使用付费方案（付费可以延长至一年有效期），想白嫖？继续往下看。&lt;/p&gt;
&lt;h2 id=&#34;操作步骤&#34;&gt;&lt;a href=&#34;#操作步骤&#34; class=&#34;headerlink&#34; title=&#34;操作步骤&#34;&gt;&lt;/a&gt;操作步骤&lt;/h2&gt;&lt;h3 id=&#34;1、下载-acme-sh-到主机&#34;&gt;&lt;a href=&#34;#1、下载-acme-sh-到主机&#34; class=&#34;headerlink&#34; title=&#34;1、下载 acme.sh 到主机&#34;&gt;&lt;/a&gt;1、下载 acme.sh 到主机&lt;/h3&gt;&lt;p&gt;这一步的脚本无需 root 账号运行，普通用户即可，但使用 root 权限也是更好的。&lt;/p&gt;
&lt;p&gt;请把下方的 &lt;a href=&#34;mailto:&amp;#x6d;&amp;#x79;&amp;#64;&amp;#x65;&amp;#x78;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#108;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&#34;&gt;&amp;#x6d;&amp;#x79;&amp;#64;&amp;#x65;&amp;#x78;&amp;#x61;&amp;#x6d;&amp;#112;&amp;#108;&amp;#101;&amp;#46;&amp;#x63;&amp;#x6f;&amp;#x6d;&lt;/a&gt; 替换为你申请域名时所填写的邮箱，不要直接复制运行！&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl https://get.acme.sh | sh -s email=my@example.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-05_11-15-15.webp&#34;&gt;&lt;br&gt;群晖在这里会报错&lt;/p&gt;
&lt;p&gt;所以群晖用户需要增加 –force 参数运行&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl https://get.acme.sh | sh -s email=my@example.com --force&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还可以使用 wget 来运行，上边如果已经运行成功了，那就没必要再使用 wget 运行了&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;wget -O -  https://get.acme.sh | sh -s email=my@example.com --force&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-05_11-23-53.webp&#34;&gt;&lt;br&gt;运行成功后截图&lt;/p&gt;
&lt;p&gt;脚本会将 acme.sh 下载到当前用户目录下，也就是 ~&amp;#x2F;.acme.sh 目录， 可使用以下方式切换到该目录：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd ~/.acme.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&#34;2、为域名申请一个证书&#34;&gt;&lt;a href=&#34;#2、为域名申请一个证书&#34; class=&#34;headerlink&#34; title=&#34;2、为域名申请一个证书&#34;&gt;&lt;/a&gt;2、为域名申请一个证书&lt;/h3&gt;&lt;p&gt;证书申请需要验证你对当前域名的所有权，通常有三种方式：80 端口、www 根目录验证、增加 DNS 记录验证&lt;/p&gt;
&lt;p&gt;acme.sh 非常强大，还拥有 standalone 模式，即使你本地啥网络服务也没部署，他也可以自己启动 80 端口，然后临时充当你的网络服务来辅助验证，甚至还可以不使用 80 端口（当你的网络服务有反向代理端口转发的话）！&lt;/p&gt;
&lt;p&gt;考虑到个人家庭公网 IP 会被屏蔽80端口，强烈建议此类跟我类似情况的用户使用 增加 DNS 记录验证 的方式来验证，因为这是最简单的方式！&lt;/p&gt;
&lt;p&gt;使用增加 DNS 记录的方式申请证书&lt;br&gt;此方式需要用到上边我们预先申请好的 Cloudflare Key 和 Zone ID。&lt;/p&gt;
&lt;p&gt;请确保当前的命令行位置是 ~&amp;#x2F;.acme.sh&lt;/p&gt;
&lt;p&gt;为了方便，建议像我这样操作：&lt;/p&gt;
&lt;p&gt;新建一个执行文件&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;touch fetch.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;编辑 fetch.sh，将以下内容放到该文件中，记得修改相应的地方为你自己的内容&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd /path/to/.acme.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export CF_Key=&amp;quot;替换成上边你保存的 KEY&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export CF_Email=&amp;quot; 替换成你申请域名的时候所填写的邮箱&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export CF_Zone_ID=&amp;quot;替换成你的域名所在的 Zone ID&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./acme.sh --issue --dns dns_cf -d 你的域名地址 -d &amp;#x27;*.你的域名地址&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./acme.sh --issue --dns dns_cf -d 你的域名地址 -d &amp;#x27;*.你的域名地址&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这行命令中：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;–dns dns_cf，就是以 cloudflare dns生成的方式，通过向我们的 DNS 解析中添加一个 txt 记录来验证你对该域名的所有权，这个过程是程序自动的，你无须做任何操作，等就可以了；&lt;br&gt;-d 你的域名地址 -d ‘&lt;em&gt;.你的域名地址’，这里看起来有两个【 -d 你的域名地址】，但他们作用不一样，前一个是你申请的主域名，后一个是你申请你域名的所有子域名（也可称之为泛域名），比如www.子域名，所以在替换的时候，一定记得：你只能替换 【你的域名地址】内容，其它地方都不要动，尤其是前边的 【&lt;/em&gt;.】 ，不要自作聪明删掉它。&lt;br&gt;编辑好之后，再给这个脚本添加执行权限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod a+x ./acme.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./fetch.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-05_13-18-55.webp&#34;&gt;&lt;br&gt;执行结果截图&lt;/p&gt;
&lt;p&gt;如果你跟我一样看到这个结果（主要是绿色的 Cert success），恭喜！你应该已经拿到了证书了。&lt;/p&gt;
&lt;p&gt;开心一下，继续下一步。&lt;/p&gt;
&lt;h3 id=&#34;3、安装证书&#34;&gt;&lt;a href=&#34;#3、安装证书&#34; class=&#34;headerlink&#34; title=&#34;3、安装证书&#34;&gt;&lt;/a&gt;3、安装证书&lt;/h3&gt;&lt;p&gt;由于接下来这一步对服务器影响较大，而且部分操作需要 root 权限，对以下操作较为陌生的人，不要轻易运行！！！在线生产环境，不要轻易运行！！！当然，如果是在非生产环境，或者你本身就对这个操作比较熟悉，那没什么问题。&lt;/p&gt;
&lt;h4 id=&#34;Apache-部署证书的方法&#34;&gt;&lt;a href=&#34;#Apache-部署证书的方法&#34; class=&#34;headerlink&#34; title=&#34;Apache 部署证书的方法&#34;&gt;&lt;/a&gt;Apache 部署证书的方法&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./acme.sh --install-cert -d 你的域名地址 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--cert-file      /path/to/certfile/in/apache/cert.pem  \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--key-file       /path/to/keyfile/in/apache/key.pem  \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--reloadcmd     &amp;quot;service apache2 force-reload&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Nginx-部署证书的方法&#34;&gt;&lt;a href=&#34;#Nginx-部署证书的方法&#34; class=&#34;headerlink&#34; title=&#34;Nginx 部署证书的方法&#34;&gt;&lt;/a&gt;Nginx 部署证书的方法&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./acme.sh --install-cert -d 你的域名地址 \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--key-file       /path/to/keyfile/in/nginx/key.pem  \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--fullchain-file /path/to/fullchain/nginx/cert.pem \&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;--reloadcmd     &amp;quot;service nginx force-reload&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;群晖部署证书的方法&#34;&gt;&lt;a href=&#34;#群晖部署证书的方法&#34; class=&#34;headerlink&#34; title=&#34;群晖部署证书的方法&#34;&gt;&lt;/a&gt;群晖部署证书的方法&lt;/h4&gt;&lt;p&gt;在网上搜索到的大部分教程，在这里都跟我讲，如果要自动部署证书到群晖，需要先这样，再那样，然后如果你 Admin 账号开了两步验证，还需要怎样怎样。听得我头皮发麻，但实际上官方的部署脚本已经升级了，所以看到这里，你们可以不用像我之前那样疑惑了。&lt;/p&gt;
&lt;p&gt;跟上边一样，新建一个 install.sh 脚本（touch install.sh），把以下内容放到脚本里，并给脚本授予执行权限（chmod a+x .&amp;#x2F;install.sh）&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd /path/to/.acme.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export SYNO_Username=&amp;#x27;群晖管理员用户名&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export SYNO_Password=&amp;#x27;群晖管理员密码&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export SYNO_Certificate=&amp;quot;证书名称&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export SYNO_DID=&amp;#x27;设备ID&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;export SYNO_Create=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;./acme.sh --deploy --deploy-hook synology_dsm -d 你的域名地址 -d &amp;#x27;*.你的域名地址&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于上边的脚本，主要是设备 ID 那里，如果你没开管理员的两步验证，就无需填写，直接删除这一行即可。&lt;/p&gt;
&lt;p&gt;用户名跟密码自不用多说，直接填；&lt;/p&gt;
&lt;p&gt;export SYNO_Certificate&amp;#x3D;”证书名称”，【证书名称】这里替换成英文，给你新申请的证书起一个名称，比如：zerossl；&lt;/p&gt;
&lt;p&gt;export SYNO_DID&amp;#x3D;’群晖设备ID’，【设备ID】这里，如果你开了两步验证，这里就需要一点点操作，【打开浏览器，使用管理员账号登陆你的群晖，登录的时候选择：记住这台设备】【按 F12 开启调试模式，这个时候会弹出来一个新的界面】【上方一横排菜单里，找到 Application，如果找不到，就把这个窗口拉宽一点儿】【在左侧的 Cookies 菜单点击下方的地址，右侧就会出现很多项内容，找到 ID，把右边的值复制出来，放到上方的”群晖设备ID“处替换即可】&lt;br&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-05_13-51-04.webp&#34;&gt;&lt;br&gt;获取设备 ID 的地方&lt;/p&gt;
&lt;p&gt;export SYNO_Create&amp;#x3D;1，脚本会自动处理，所以不管你的证书是不是新建，都可以这么写&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;./acme.sh --deploy --deploy-hook synology_dsm -d 你的域名地址 -d &amp;#x27;*.你的域名地址&amp;#x27;，--deploy-hook synology_dsm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是专门针对群晖部署的方式，如果你不是群晖设备，请参考其它部署方式。&lt;/p&gt;
&lt;p&gt;官方脚本已经提供了输入两步验证（OTP code）的输入口了&lt;/p&gt;
&lt;p&gt;等你输入好两步验证码之后，命令行会跳出新的输入，设备名称那里可以留空，你直接回车即可，脚本会自己默认一个名称的。&lt;/p&gt;
&lt;p&gt;官方提供了超级多的其它的自动化部署方式，本文不再一一赘述，请参考官方提供的部署方式WIKI。&lt;/p&gt;
&lt;h3 id=&#34;4、自动化更新证书&#34;&gt;&lt;a href=&#34;#4、自动化更新证书&#34; class=&#34;headerlink&#34; title=&#34;4、自动化更新证书&#34;&gt;&lt;/a&gt;4、自动化更新证书&lt;/h3&gt;&lt;p&gt;在操作步骤第一步的时候，可以看到我的截图里有报错，其实 acme.sh 有检查自动化任务，同时也会在安装时自动部署更新脚本，60天后（证书过期前30天），自动申请延长证书。&lt;/p&gt;
&lt;p&gt;使用其它不具备运行 crontab 系统的小伙伴（比如群晖），就需要自己到定时任务管理系统去设置一下了，但其实在上方的准备一切正常的情况下，你也只需要运行两个脚本：fetch.sh 获取下新的证书，install.sh 把证书安装到服务器即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-05_14-40-03.webp&#34;&gt;&lt;br&gt;群晖的任务管理设置入口&lt;/p&gt;
&lt;p&gt;群晖系统自身带有任务管理，在任务管理里设置好脚本，我也就摆脱了手动之苦，享受全自动化带来的乐趣了~&lt;/p&gt;
&lt;h2 id=&#34;SSL-证书的意义&#34;&gt;&lt;a href=&#34;#SSL-证书的意义&#34; class=&#34;headerlink&#34; title=&#34;SSL 证书的意义&#34;&gt;&lt;/a&gt;SSL 证书的意义&lt;/h2&gt;&lt;p&gt;老手自不用多说，SSL 是初入编程世界的新人必须要了解的一个知识，本文也是面向较为初级的编程新手，希望大家通过 SSL 证书保护好自己的隐私和数据。&lt;/p&gt;
&lt;p&gt;其实在各个开发平台，厂商也都半强制要求了开发者所开发的 App 在调用后端接口时，必须要使用 Https 协议而非 Http 进行通信，这也是依赖于 SSL 证书的。&lt;/p&gt;
&lt;p&gt;所以你还在等什么 ~&lt;/p&gt;
&lt;p&gt;哦，对了，本来写这篇文章我是有点儿拖延症的，两天了一直没动，直到我打开了 testv 的官网，发现他们 https 证书居然过期了。&lt;br&gt;&lt;img src=&#34;/upload/Snipaste_2023-12-05_14-42-40.webp&#34;&gt;&lt;br&gt;哈！哈！哈！&lt;/p&gt;
&lt;p&gt;作为老粉丝，我突然就来了兴趣，干脆就通过这种方式来催 testv 更新证书好了。&lt;/p&gt;
&lt;p&gt;希望他们看到。&lt;/p&gt;
</content>
        <category term="程序员" />
        <category term="NAS" />
        <category term="网络" />
        <updated>2023-12-05T13:47:07.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.gadore.top/archives/1689128493165/</id>
        <title>当你拥有了第二台NAS，这是你需要了解的数据迁移和同步方式</title>
        <link rel="alternate" href="https://blog.gadore.top/archives/1689128493165/"/>
        <content type="html">&lt;p&gt;自从有了NAS，我的数字生活总算是找到了一个家，数据安全地躺在这里，不受任何方面的干扰：不用担心供应商跑路，不用害怕数据泄漏，也不需要频繁地在各个云服务商之间颠转腾挪。&lt;/p&gt;
&lt;p&gt;但当自己成了自己数字资产的第一负责人后，一系列的顾忌也接踵而至：NAS 的硬盘坏了怎么办？NAS 坏了怎么办？NAS 丢了怎么办？&lt;/p&gt;
&lt;p&gt;针对这些问题，网络社区也早有应对答案：RAID 和两地三中心。&lt;/p&gt;
&lt;p&gt;针对硬盘损坏，倒还是比较容易解决的。比如，群晖 DS 系列本就设计有双盘、四盘的 RAID 冗余盘位，一般情况下，为了自己的数据安全，初始化的时候可以选择 RAID1、RAID5 等拥有数据冗余的磁盘阵列组合，以此来保障我们的数据不会因为单个磁盘的故障而损坏。&lt;/p&gt;
&lt;p&gt;因为数据是无价的，所以我也不敢忽视低概率的另外俩问题：NAS 的损坏、丢失等问题。这也就涉及到了本文的重点：两地三中心的搭建、数据迁移以及数据同步。&lt;/p&gt;
&lt;h2 id=&#34;搭建低配两地三中心&#34;&gt;&lt;a href=&#34;#搭建低配两地三中心&#34; class=&#34;headerlink&#34; title=&#34;搭建低配两地三中心&#34;&gt;&lt;/a&gt;搭建低配两地三中心&lt;/h2&gt;&lt;p&gt;两地三中心，顾名思义：你的数据需要存在于三个数据中心，这三个数据中心至少要存在于两个城市。&lt;/p&gt;
&lt;p&gt;我相信购买 NAS 的大多数其实是跟我一样的工薪阶层，暂时还没考虑互联网企业的数据中心、数据机房那种百万级别的服务器集群建设。所以在搭建费用上，我选择的是最低花销方案。&lt;/p&gt;
&lt;h3 id=&#34;1、重要数据加密后上云&#34;&gt;&lt;a href=&#34;#1、重要数据加密后上云&#34; class=&#34;headerlink&#34; title=&#34;1、重要数据加密后上云&#34;&gt;&lt;/a&gt;1、重要数据加密后上云&lt;/h3&gt;&lt;p&gt;云服务商的廉价和低使用成本是我不能忽视的一个选择，群晖的 Cloud Sync 应用支持百度、京东、阿里、微软十多家云服务的接入，在拥有第一台 NAS 后，我就把我的重要数据加密备份到了这种云服务商的平台上，这些平台有一个不能忽视的优点：免费。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-26_20-40-11.webp&#34;&gt;可以接入许多公有云服务进行数据同步&lt;/p&gt;
&lt;p&gt;你要知道，个人重要资料压缩加密后的空间占用很小，云服务的免费额度已经足够使用了。&lt;/p&gt;
&lt;p&gt;而且这些云服务没有任何运维成本、付费后你是爹（比如下载百度云的时候，一次月付即可完成备份数据的下载）。&lt;/p&gt;
&lt;h3 id=&#34;2、第二台-NAS-的购置&#34;&gt;&lt;a href=&#34;#2、第二台-NAS-的购置&#34; class=&#34;headerlink&#34; title=&#34;2、第二台 NAS 的购置&#34;&gt;&lt;/a&gt;2、第二台 NAS 的购置&lt;/h3&gt;&lt;p&gt;在&lt;a href=&#34;/archives/1683599671683&#34;&gt;个人家庭宽带升级&lt;/a&gt;中有提到，因为本人是大城市打工仔一名，房子自然是买不起的。而且受限于租房的网络条件会因为换租频繁变动，我就在五一假期期间将 NAS 放到了我的老家去了。不但解决了公网 IP 的问题，同时还让我免去了在大城市打工期间频繁地跟房东、运营商、小区网络管理员等人沟通的成本。但这也带来另一个问题：公网访问的网速受限严重。&lt;/p&gt;
&lt;p&gt;当时买 NAS 的初衷就是可以随心看自己喜欢看的剧集，但公网速度有时候会极大地剥夺这份快乐：网速差。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-26_21-21-10.webp&#34;&gt;在小小的屏幕上转啊转啊转啊转啊，就是不播放&lt;/p&gt;
&lt;p&gt;起初我是打算买块硬盘挂到我的台式机，然后在台式机上部署各种各样的服务来最低程度实现第二台 NAS 的。&lt;/p&gt;
&lt;p&gt;我可以先把数据同步到我的 Windows 的机械硬盘上，然后在此基础上再进行各种数据服务拓展。&lt;/p&gt;
&lt;p&gt;但经过了一周的数据迁移和使用后，我发现这个方案太蹩脚了，而且使用起来非常不方便！&lt;/p&gt;
&lt;h4 id=&#34;PC-NAS-耗电难忍&#34;&gt;&lt;a href=&#34;#PC-NAS-耗电难忍&#34; class=&#34;headerlink&#34; title=&#34;PC NAS 耗电难忍&#34;&gt;&lt;/a&gt;PC NAS 耗电难忍&lt;/h4&gt;&lt;p&gt;NAS 低功耗的特点可以让我长时间保持机器开机而不用心疼电费，但PC主机待机功耗就高达40 ~ 50W（据我所知，这还不算最高的）,更不要说我当时组装 PC 的时候买的扇热风扇是自带闪瞎眼 RGB 灯效的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/IMG_0371%20(1).webp&#34;&gt;我家猫那几天晚上一直在这种蹦迪环境中&lt;/p&gt;
&lt;h4 id=&#34;系统体验一言难尽&#34;&gt;&lt;a href=&#34;#系统体验一言难尽&#34; class=&#34;headerlink&#34; title=&#34;系统体验一言难尽&#34;&gt;&lt;/a&gt;系统体验一言难尽&lt;/h4&gt;&lt;p&gt;家里 PC 还同时承担着游戏主机和休闲主机的任务，暂时不能给他换成 TrueNAS 、Unraid 等第三方 NAS 系统。&lt;/p&gt;
&lt;p&gt;因此我就尝试在 Windows 上搭建我的一系列服务：Docker、Webdav、Smb，然后再基于 Docker 进行 Emby ，Komga 等服务的搭建。&lt;/p&gt;
&lt;p&gt;但我发现这一点也非常不好实现。&lt;/p&gt;
&lt;p&gt;首先 Windows 的 IIS 自带的 Webdav Server 最大只支持 4GB 的文件传输（就这都得改注册表才能实现），也就是说超过 4GB 的文件就无法同步过来；那我只好换方案，我用 Smb 协议把文件夹挂载到 Windows 本地，再使用 FreeFileSync 进行数据同步，算是解决了最大文件限制的问题。&lt;/p&gt;
&lt;p&gt;但当我把 Docker 中的各个镜像也启动之后，另一个窒息的问题问题来了：我的 16GB 的内存怎么就只剩下 2GB 可用了？！（各种服务存在的同时还用电脑做娱乐或者办公的场景）&lt;/p&gt;
&lt;p&gt;干脆再买台 NAS 吧，看着折腾了好几天之后心情愈加难受的镜中的我说道。&lt;/p&gt;
&lt;p&gt;于是就有了今天的主角：DS220+。&lt;/p&gt;
&lt;p&gt;别问，问就是穷；再问就破防（刚买了半个月，DS224+ 发布了，处理器性能翻倍&amp;gt;_&amp;lt;）。&lt;/p&gt;
&lt;h3 id=&#34;3、群晖-NAS-间的数据同步软件&#34;&gt;&lt;a href=&#34;#3、群晖-NAS-间的数据同步软件&#34; class=&#34;headerlink&#34; title=&#34;3、群晖 NAS 间的数据同步软件&#34;&gt;&lt;/a&gt;3、群晖 NAS 间的数据同步软件&lt;/h3&gt;&lt;p&gt;早就听说了群晖的数据同步非常完善，所以我也在机器到手后把该装的不该装的都装了一遍。结果发现最终能使用的其实非常少。&lt;/p&gt;
&lt;p&gt;先说我的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;已有的主机是 DS 920+，拥有 20GB 的内存和10TB 的存储空间 ，8TB 存主数据（raid 5）， 2TB 用来当下载缓存盘（无Raid）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我有公网域名，通过 DDNS 指向一个动态分配的公网 IP；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;我在主 NAS 上部署了 OpenVPN 来组网，保证我的设备可以在全国各地有网的环境下相互联通；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当前新买的从机是 DS220+，配备两块16TB 的磁盘组 Raid1；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的诉求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;我的两台NAS的主数据相互同步，又可以相互独立使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;同步数据时，可以在公网的条件下进行，但又要有一定程度的安全性（ frp 完全暴露要不得）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下是我这几天设置数据迁移过程中的一些使用体验，有任何问题欢迎指正。&lt;/p&gt;
&lt;h4 id=&#34;Hyper-Backup&#34;&gt;&lt;a href=&#34;#Hyper-Backup&#34; class=&#34;headerlink&#34; title=&#34;Hyper Backup&#34;&gt;&lt;/a&gt;Hyper Backup&lt;/h4&gt;&lt;p&gt;功能：这个软件是把系统整机备份到另一台设备，备份后就相当于是一个加密的压缩包，你反正没法找文件，也没法从中读取任何数据，只能再找一个机器恢复出来。&lt;/p&gt;
&lt;p&gt;感受：就像你可以把 iPhone 连接你的电脑，点击备份整机数据。然后等买了新手机后，再点击从备份中恢复一样。&lt;/p&gt;
&lt;p&gt;优点：可以备份几乎所有数据。&lt;/p&gt;
&lt;p&gt;缺点：只是整机备份，备份后的数据是一个压缩包，无法作为正常可识别数据供我使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-26_20-57-47.webp&#34;&gt;备份文件夹、备份套件等等，非常细致&lt;/p&gt;
&lt;h4 id=&#34;Migration-Assistant&#34;&gt;&lt;a href=&#34;#Migration-Assistant&#34; class=&#34;headerlink&#34; title=&#34;Migration Assistant&#34;&gt;&lt;/a&gt;Migration Assistant&lt;/h4&gt;&lt;p&gt;功能：这个迁移助手可以提供 NAS 整机的数据和资料迁移。迁移期间你的很多数据文件夹和服务都会被锁死无法使用，而且迁移后它就结束工作了，你这边的文件如果有什么变动的话，它是不会帮你实时同步的。&lt;/p&gt;
&lt;p&gt;优点：就相当于安卓或者 iOS 换机，如果是手中有台 NAS 并且又买了一台新的 NAS 的话，可以使用该功能进行数据的拷贝，会方便不少。&lt;/p&gt;
&lt;p&gt;缺点：迁移完成后数据不再同步，迁移过程中还会停用很多服务，而且非常依赖网络环境，网络不稳定会导致任务卡住直接失败，需要重新来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-26_21-01-40.webp&#34;&gt;NAS 版换机助手&lt;/p&gt;
&lt;h4 id=&#34;High-Avaliablity&#34;&gt;&lt;a href=&#34;#High-Avaliablity&#34; class=&#34;headerlink&#34; title=&#34;High Avaliablity&#34;&gt;&lt;/a&gt;High Avaliablity&lt;/h4&gt;&lt;p&gt;功能：它可以把两台 NAS 主机组成一个热备，实时同步两台机器的所有数据和状态，当其中一台宕机之后，另一台立刻顶上去，让用户可以稳定使用网盘服务。&lt;/p&gt;
&lt;p&gt;感受：几乎没有缺点，这个套件其实非常接近我的需求，但它有一个强制性要求：两台主机必须使用物理网线点对点连接（心跳线），无法跨局域网使用。&lt;/p&gt;
&lt;p&gt;唉，总之对我而言：不适用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-26_21-05-10.webp&#34;&gt;这个套件适合小型工作室使用&lt;/p&gt;
&lt;h4 id=&#34;Cloud-Sync&#34;&gt;&lt;a href=&#34;#Cloud-Sync&#34; class=&#34;headerlink&#34; title=&#34;Cloud Sync&#34;&gt;&lt;/a&gt;Cloud Sync&lt;/h4&gt;&lt;p&gt;这款软件可以让你的NAS接入许多商用云，公有云等开放的协议接口，刚买 NAS 的时候用它把百度云中的数据都下载下来了。这次我重新研究了一下它的用途，发现这个套件非常不得了！&lt;/p&gt;
&lt;p&gt;功能：它的使用步骤就两步：连接主机、设置同步任务。&lt;/p&gt;
&lt;p&gt;连接主机：支持通用的 Webdav 协议、百度云、腾讯云 COS、阿里云对象存储、OneDrive 等等，只需要登录一次。&lt;/p&gt;
&lt;p&gt;同步任务：你可以设置多个同步任务，每个任务包含一个本地路径和远程路径，你可以设置同步方向是双向或单项，同步任务可以添加多个。&lt;/p&gt;
&lt;p&gt;这款软件完全适用我的需求！&lt;/p&gt;
&lt;p&gt;缺点：相比较前三个套件，CloudSync 只能同步用户新建的共享文件夹下的数据，如果数据没有存在共享文件夹下（比如 NoteStation），那就无法进行数据同步了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-20_12-20-42.webp&#34;&gt;一个链接下添加多个同步任务&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-20_12-21-04.webp&#34;&gt;可以设置同步计划，如果感觉晚上硬盘太吵可以设置晚上不同步&lt;/p&gt;
&lt;h4 id=&#34;Synology-Drive-ShareSync-2023-07-31-16-00补充更新&#34;&gt;&lt;a href=&#34;#Synology-Drive-ShareSync-2023-07-31-16-00补充更新&#34; class=&#34;headerlink&#34; title=&#34;Synology Drive ShareSync (2023-07-31 16:00补充更新)&#34;&gt;&lt;/a&gt;Synology Drive ShareSync (2023-07-31 16:00补充更新)&lt;/h4&gt;&lt;p&gt;在网络上跟别人讨论后，发现还有一个套件也能实现跨网络的文件夹同步，甚至不需要公网 IP ，只需要一个quickconnect id，遂赶紧补充到这里。&lt;/p&gt;
&lt;p&gt;功能：可以使用 qc id 进行同步，无需公网 IP 、可以选择开启了团队文件夹的所有文件数据&lt;/p&gt;
&lt;p&gt;感受：这个群晖自带的套件使用更加简洁方便（相比较Cloud Sync），对两台 NAS 的要求也更少，更适合不喜欢折腾的人使用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-31_16-10-47.webp&#34; alt=&#34;Snipaste_2023-07-31_16-10-47.webp&#34;&gt;使用前提：在DriveServer控制台为共享文件夹开启团队文件夹功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-31_16-13-16.webp&#34;&gt;也拥有类似Cloud Sync的同步逻辑设置，但没有任务执行时间策略调整&lt;/p&gt;
&lt;h3 id=&#34;4、网络&#34;&gt;&lt;a href=&#34;#4、网络&#34; class=&#34;headerlink&#34; title=&#34;4、网络&#34;&gt;&lt;/a&gt;4、网络&lt;/h3&gt;&lt;p&gt;网络的联通其实是一切跨互联网同步的基础，关于公网 IP 和动态域名的映射问题，我在&lt;a href=&#34;/archives/1683599671683&#34;&gt;&lt;strong&gt;个人家庭宽带公网 IP 升级杂记&lt;/strong&gt;&lt;/a&gt;里也提到过，不再赘述。&lt;/p&gt;
&lt;p&gt;这里单独说一下当时让我头疼了很久但最后发现很简单的一件事：Openvpn 的连接。&lt;/p&gt;
&lt;p&gt;在 PC 上也好，移动端也好，我都可以非常简单地找到客户端来导入我的配置文件并登陆我的主机，完成设备组网并连接到我的主机上。但群晖的商店却无论如何找不到这个客户端软件，开源社区也是。&lt;/p&gt;
&lt;p&gt;我当时在想：难道没人这么用过？&lt;/p&gt;
&lt;p&gt;结果答案却让我笑掉大牙：依次打开【控制面板】【网络】【新增】。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-07-26_21-11-24.webp&#34;&gt;看到熟悉的字段了吗？&lt;/p&gt;
&lt;p&gt;喔，我的老伙计，原来你在这啊！&lt;/p&gt;
&lt;p&gt;这是我的&lt;a href=&#34;/categories/%E6%98%8E%E6%98%8E%E7%99%BD%E7%99%BD%E7%8E%A9NAS/&#34;&gt;明明白白玩NAS系列&lt;/a&gt;的第&lt;strong&gt;六&lt;/strong&gt;篇文章了，如果你对这个系列的其他文章感兴趣，可以访问&lt;a href=&#34;/categories/%E6%98%8E%E6%98%8E%E7%99%BD%E7%99%BD%E7%8E%A9NAS/&#34;&gt;这里&lt;/a&gt;查看。&lt;/p&gt;
</content>
        <category term="程序员" />
        <category term="NAS" />
        <category term="网络" />
        <updated>2023-07-26T20:28:38.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.gadore.top/archives/1687328820096/</id>
        <title>群晖DSM系统下的VideoStation修改ffmpeg以支持DTS、AAC、HEVC等播放格式</title>
        <link rel="alternate" href="https://blog.gadore.top/archives/1687328820096/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;/upload/bliss%20600dpi.webp&#34; alt=&#34;bliss 600dpi.webp&#34;&gt;前几天微软发布了WindowsXP 经典蓝天白云壁纸，但是是重制版，我找到了这个原版4K分辨率的，趁此机会发出来好了&lt;/p&gt;
&lt;p&gt;如题，每次DSM更新都会导致我的VideoStation没法播放部分有DTS音轨的视频，手动更新了两次，后来又自己写了bash脚本来自动更新，但每次都会有各种各样的小问题，甚是困扰。&lt;/p&gt;
&lt;p&gt;去网上搜索各种ln和mv backup脚本，每次更新之后脚本内容都不一定完全兼容，太痛苦了。&lt;/p&gt;
&lt;p&gt;干脆，上Github。&lt;/p&gt;
&lt;p&gt;果然，已经有人做了自动化修补脚本，在此记录分享一下。&lt;/p&gt;
&lt;p&gt;有条件的可以直接看源项目：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目地址：&lt;/strong&gt;&lt;a href=&#34;https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher&#34;&gt;&lt;strong&gt;VideoStation-FFMPEG-Patcher&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果网络条件不好可以参考我下方的搬运内容。&lt;/p&gt;
&lt;h2 id=&#34;系统支持情况&#34;&gt;&lt;a href=&#34;#系统支持情况&#34; class=&#34;headerlink&#34; title=&#34;系统支持情况&#34;&gt;&lt;/a&gt;系统支持情况&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;DSM 6.2.2-24922 Update 4 (and above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Video Station 2.4.6-1594 (and above)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SynoCommunity ffmpeg 4.x.x, ffmpeg 5.x.x or ffmpeg 6.x.x (&lt;a href=&#34;https://synocommunity.com/#easy-install&#34;&gt;help&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2023-06-21 DSM7.2亲测可用。&lt;/p&gt;
&lt;h2 id=&#34;当前支持和非支持功能&#34;&gt;&lt;a href=&#34;#当前支持和非支持功能&#34; class=&#34;headerlink&#34; title=&#34;当前支持和非支持功能&#34;&gt;&lt;/a&gt;当前支持和非支持功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[DTS or EAC3 or TrueHD] + [Any non HEVC standard video format]&lt;/strong&gt;: ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[no DTS, no EAC3, no TrueHD] + [HEVC]&lt;/strong&gt;: ✅&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;[DTS or EAC3 or TrueHD] + [HEVC]&lt;/strong&gt;: ⚠️ Not working on architectures where Advanced Media Extensions uses GStreamer for audio decoding&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用方式和可选参数&#34;&gt;&lt;a href=&#34;#使用方式和可选参数&#34; class=&#34;headerlink&#34; title=&#34;使用方式和可选参数&#34;&gt;&lt;/a&gt;使用方式和可选参数&lt;/h2&gt;&lt;h3 id=&#34;前提条件&#34;&gt;&lt;a href=&#34;#前提条件&#34; class=&#34;headerlink&#34; title=&#34;前提条件&#34;&gt;&lt;/a&gt;前提条件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Check that you meet the required &lt;a href=&#34;https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher#dependencies&#34;&gt;dependencies&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install SynoCommunity ffmpeg (&lt;a href=&#34;https://synocommunity.com/#easy-install&#34;&gt;help&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you plan to play HEVC &amp;#x2F; AAC videos, install Advanced Media Extensions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect to your NAS using SSH (admin user required) (&lt;a href=&#34;https://www.synology.com/en-global/knowledgebase/DSM/tutorial/General_Setup/How_to_login_to_DSM_with_root_permission_via_SSH_Telnet&#34;&gt;help&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the command &lt;code&gt;sudo -i&lt;/code&gt; to switch to root user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher#usage&#34;&gt;following&lt;/a&gt; command (Basic command) to execute the patch&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note : Basic command uses &lt;strong&gt;ffmpeg4&lt;/strong&gt; by default, if you want to use a different ffmpeg version (i.e. &lt;strong&gt;ffmpeg5&lt;/strong&gt; or &lt;strong&gt;ffmpeg6&lt;/strong&gt;), please check the command &lt;a href=&#34;https://github.com/AlexPresso/VideoStation-FFMPEG-Patcher#usage&#34;&gt;flags&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You’ll have to re-run the patcher everytime you update VideoStation, Advanced Media Extensions and DSM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;运行脚本&#34;&gt;&lt;a href=&#34;#运行脚本&#34; class=&#34;headerlink&#34; title=&#34;运行脚本&#34;&gt;&lt;/a&gt;运行脚本&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-06-21_14-28-21.webp&#34; alt=&#34;Snipaste_2023-06-21_14-28-21.webp&#34;&gt;傻瓜脚本，一键运行&lt;/p&gt;
&lt;p&gt;正常情况下，运行下方的第一行命令即可（没有科学的条件的话，网速会比较慢，耐心等待即可），高端玩家可以自行参考第二行命令及下方表格说明。&lt;/p&gt;
&lt;p&gt;Basic command:  &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher/main/patcher.sh | bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With options:  &lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;curl https://raw.githubusercontent.com/AlexPresso/VideoStation-FFMPEG-Patcher/main/patcher.sh | bash -s -- &amp;lt;flags&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flags&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;-a&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Action flag: choose between &lt;code&gt;patch&lt;/code&gt; or &lt;code&gt;unpatch&lt;/code&gt; ; example: &lt;code&gt;-a patch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;patch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-b&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Branch flag: allows you to choose the wrapper branch to use ; example &lt;code&gt;-b main&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Proxy flag: allows you to use a proxy to connect to github ; example &lt;code&gt;-p http://my-proxy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/&#34;&gt;https://github.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;FFMpeg version flag: allows you to choose desired ffmpeg version ; example &lt;code&gt;-v 5&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;4&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <category term="程序员" />
        <category term="NAS" />
        <updated>2023-06-21T13:32:29.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.gadore.top/archives/1680250983095/</id>
        <title>受够了密码数据泄漏事件？用 Bitwarden 做自己的安全负责人</title>
        <link rel="alternate" href="https://blog.gadore.top/archives/1680250983095/"/>
        <content type="html">&lt;p&gt;从 iPhone12mini 换到小米13已经两个月了，我也基本上适应了安卓手机作为主力机的数字生活了，但有一点是无论如何不能适应的：&lt;/p&gt;
&lt;p&gt;安卓手机的密码自动填充，体验真的有够差，也无法生态联动，已经是无法日用的地步。&lt;/p&gt;
&lt;p&gt;再加上近两年 Chrome 密码泄漏事件频发，这也同样导致我不得不把谷歌账号里保存的密码自动填充都删掉，好了，密码是删掉了，那我岂不是一夜回到解放前，以后所有网站都要自己手动输入密码了吗？&lt;/p&gt;
&lt;p&gt;我咬牙坚持了一个月之后得出一个结论：不太行。&lt;/p&gt;
&lt;p&gt;现在的社交媒体网站五花八门，我们的生活也充斥着各式各样的网站和App，如果你从现在开始关闭浏览器的 “ 记住密码 ” ，并把之前保存的密码全部删除，相信我，很多网站的密码到底是什么你可能都已经忘记了，因为网站实在是太多了！&lt;/p&gt;
&lt;h2 id=&#34;我需要密码管理吗&#34;&gt;&lt;a href=&#34;#我需要密码管理吗&#34; class=&#34;headerlink&#34; title=&#34;我需要密码管理吗&#34;&gt;&lt;/a&gt;我需要密码管理吗&lt;/h2&gt;&lt;p&gt;我相信肯定有一些人是 “一套密码走天下” 派系的，这一派系在当代的各种奇奇怪怪的密码规则要求下，应该也活的很崩溃吧？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;密码长度不能低于八位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;密码必须包含大小写字母和数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;密码必须含有至少一个特殊字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;密码不能超过14位&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;密码不能包含用户名信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;123456？不行不行，被朋友嘲笑了一年了说什么也不能用了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;密码必须……&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-06_09-30-07.webp&#34; alt=&#34;Snipaste_2023-04-06_09-30-07.webp&#34;&gt;图片来源于unsplash&lt;/p&gt;
&lt;p&gt;即使当前你的一个密码可以满足要求，但我相信这串密码经过每年的超进化后又会变得混乱不堪。&lt;/p&gt;
&lt;p&gt;当然了，你可能跟我一样拥有超群的记忆力（臭不要脸），也能记住自己的所有社交媒体和网站的账号，但在日复一日的密码输入后，你会有种恍如隔世的挫败感：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么科技如此发达的今天，我还要这样一遍一遍地重复输入我的密码，我还要痛苦多少次？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;密码管理器的选择&#34;&gt;&lt;a href=&#34;#密码管理器的选择&#34; class=&#34;headerlink&#34; title=&#34;密码管理器的选择&#34;&gt;&lt;/a&gt;密码管理器的选择&lt;/h2&gt;&lt;p&gt;那有需求自然有市场，眼下各家科技公司也早已帮我们准备好了应对方案。&lt;/p&gt;
&lt;h3 id=&#34;苹果-iCloud-钥匙串&#34;&gt;&lt;a href=&#34;#苹果-iCloud-钥匙串&#34; class=&#34;headerlink&#34; title=&#34;苹果 iCloud 钥匙串&#34;&gt;&lt;/a&gt;苹果 iCloud 钥匙串&lt;/h3&gt;&lt;p&gt;在安全上问题上，苹果的生态布局永远领先对手好几年，我长达八年的苹果设备使用经历，也在 iCloud 中留下了非常多的个人使用痕迹。&lt;/p&gt;
&lt;p&gt;现在即使给我一个新的 Apple 设备来设置，只要让我登录一下 iCloud 账号，那剩下的 App 基本上都可以用钥匙圈来解决登陆问题，无需再亲力亲为了。&lt;br&gt;钥匙串，就是一个&lt;strong&gt;旦用难回&lt;/strong&gt;（一旦使用就很难再回到未使用的状态）的功能。&lt;/p&gt;
&lt;h4 id=&#34;它是如何工作的呢&#34;&gt;&lt;a href=&#34;#它是如何工作的呢&#34; class=&#34;headerlink&#34; title=&#34;它是如何工作的呢&#34;&gt;&lt;/a&gt;它是如何工作的呢&lt;/h4&gt;&lt;p&gt;在你使用苹果设备的过程中，任何时候进行登录行为时，苹果都会贴心地弹出一个小小的提示：密码&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Full%20HD-zeis.webp&#34; alt=&#34;Full HD-zeis.webp&#34;&gt;在输入任何内容时，键盘上方会出现一个【密码】按钮&lt;/p&gt;
&lt;p&gt;你只需点击它，验证一下生物特征（人脸&amp;#x2F;指纹 识别），就可以选择系统推荐的账号密码信息自动填充待输入处的信息。全程使用优雅且便携。&lt;/p&gt;
&lt;p&gt;而且这些信息是全生态同步的（全苹果生态），这也就意味着你只要在任何联网设备上输入一次信息，以后在其它设备上一样可以重复使用这次输入的信息。&lt;/p&gt;
&lt;p&gt;使用体验满分。&lt;/p&gt;
&lt;h4 id=&#34;它的缺点也很明显&#34;&gt;&lt;a href=&#34;#它的缺点也很明显&#34; class=&#34;headerlink&#34; title=&#34;它的缺点也很明显&#34;&gt;&lt;/a&gt;它的&lt;strong&gt;缺点&lt;/strong&gt;也很明显&lt;/h4&gt;&lt;p&gt;你无法在非苹果生态上使用钥匙串，这也就意味着如果你在使用苹果设备的同时，还同样持有 Android、Windows、Linux 等设备的话……&lt;/p&gt;
&lt;p&gt;很不幸，一夜回到解放前。&lt;/p&gt;
&lt;h3 id=&#34;1Password&#34;&gt;&lt;a href=&#34;#1Password&#34; class=&#34;headerlink&#34; title=&#34;1Password&#34;&gt;&lt;/a&gt;1Password&lt;/h3&gt;&lt;p&gt;这家公司正是看到了iCloud的缺陷，所以顺势推出了一款全平台的密码管理器，涵盖 macOS、iOS（和 watchOS）、Windows、Android、Linux 和命令行 等使用场景。&lt;/p&gt;
&lt;p&gt;但作为一家商业公司，1Password现在已经推出了订阅制服务，会员的持续订阅也能让公司更长远地走下去。&lt;/p&gt;
&lt;p&gt;以上两款密码管理器都有一个共同的我不能容忍的点：他们仍旧在他们的服务器上存储了我的所有账号和密码。&lt;/p&gt;
&lt;p&gt;什么是安全？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安全，是把东西牢牢握在自己手上的踏实感。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以我开始搜寻一款支持&lt;strong&gt;自托管&lt;/strong&gt;的，跨平台的密码管理工具。&lt;/p&gt;
&lt;p&gt;在这一过程中，我找到了它——也就是今天的主角：&lt;strong&gt;Bitwarden&lt;/strong&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;Bitwarden&#34;&gt;&lt;a href=&#34;#Bitwarden&#34; class=&#34;headerlink&#34; title=&#34;Bitwarden&#34;&gt;&lt;/a&gt;Bitwarden&lt;/h3&gt;&lt;p&gt;这是一款开源的密码管理器，同样支持当前所有主流的平台。&lt;/p&gt;
&lt;p&gt;个人用户免费，可以通过付费开通高级账户以使用 2FA （二级验证）功能来增强你的密码管理器的安全性。&lt;/p&gt;
&lt;p&gt;更重要的是：它支持 Self-Hosting ！也就是自己部署和托管 ！&lt;/p&gt;
&lt;p&gt;当然了，如果你暂时不具备 Self-Hosting 的条件，你也可以选择使用免费的官方服务，只需要注册一个官方账号就好了，使用官方也有一个好处：你不需要关心任何部署和后期维护和升级相关的事情，坐享其成（褒义）就可以了。&lt;/p&gt;
&lt;p&gt;所以它其实就是一个免费版本的 1Password，还支持自行部署。&lt;/p&gt;
&lt;h2 id=&#34;在-NAS-上部署-BitWarden&#34;&gt;&lt;a href=&#34;#在-NAS-上部署-BitWarden&#34; class=&#34;headerlink&#34; title=&#34;在 NAS 上部署 BitWarden&#34;&gt;&lt;/a&gt;在 NAS 上部署 BitWarden&lt;/h2&gt;&lt;p&gt;如果你恰巧跟我一样，希望把数据牢牢抓在自己手上，那你可算来着了。&lt;/p&gt;
&lt;p&gt;我会把我部署和使用 Bitwarden 的过程进行介绍。&lt;/p&gt;
&lt;h3 id=&#34;使用的设备&#34;&gt;&lt;a href=&#34;#使用的设备&#34; class=&#34;headerlink&#34; title=&#34;使用的设备&#34;&gt;&lt;/a&gt;使用的设备&lt;/h3&gt;&lt;p&gt;部署设备：群晖 DS920+&lt;/p&gt;
&lt;p&gt;系统版本：DSM7.1.1&lt;/p&gt;
&lt;p&gt;Docker 版本：20.10.3&lt;/p&gt;
&lt;h3 id=&#34;你的准备&#34;&gt;&lt;a href=&#34;#你的准备&#34; class=&#34;headerlink&#34; title=&#34;你的准备&#34;&gt;&lt;/a&gt;你的准备&lt;/h3&gt;&lt;p&gt;你需要至少拥有以下条件或环境&lt;/p&gt;
&lt;p&gt;部署环境：云服务器或自建服务器，也可以用群晖、威联通等自带 Docker 环境的 NAS 设备代替，你甚至可以用树莓派，但你需要保证它里边的数据长久稳定&lt;/p&gt;
&lt;p&gt;外网服务：你的部署环境需要具备外网环境，可以是你家庭或购买服务器自带的公网 IP，如果没有公网IP，你的使用体验将非常受限&lt;/p&gt;
&lt;p&gt;动手能力：你需要基础的 Linux 操作能力，以应对接下来的一系列操作&lt;/p&gt;
&lt;p&gt;测试设备：主力手机一台，可以是 iOS 或者安卓操作系统，主力工作电脑一台，如无需求请忽略&lt;/p&gt;
&lt;h3 id=&#34;在-Docker-中安装&#34;&gt;&lt;a href=&#34;#在-Docker-中安装&#34; class=&#34;headerlink&#34; title=&#34;在 Docker 中安装&#34;&gt;&lt;/a&gt;在 Docker 中安装&lt;/h3&gt;&lt;p&gt;注意：一下全部流程需要使用&lt;strong&gt;管理员&lt;/strong&gt;账号操作。&lt;/p&gt;
&lt;h4 id=&#34;下载并安装-Docker&#34;&gt;&lt;a href=&#34;#下载并安装-Docker&#34; class=&#34;headerlink&#34; title=&#34;下载并安装 Docker&#34;&gt;&lt;/a&gt;下载并安装 Docker&lt;/h4&gt;&lt;p&gt;在群晖的【套件中心】找到 Docker 软件，点击安装&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_10-13-35.webp&#34; alt=&#34;Snipaste_2023-04-03_10-13-35.webp&#34;&gt;下载Docker&lt;/p&gt;
&lt;h4 id=&#34;在-Docker-中下载镜像&#34;&gt;&lt;a href=&#34;#在-Docker-中下载镜像&#34; class=&#34;headerlink&#34; title=&#34;在 Docker 中下载镜像&#34;&gt;&lt;/a&gt;在 Docker 中下载镜像&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 Docker，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;左侧，点击【注册表】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在右侧右上角输入框输入：vaultwarden，回车搜索（官方镜像更名为 vaultwarden，所以不要输入错了）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在列出的镜像中选择名称为：vaultwarden&amp;#x2F;server，单击当前行即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;选中当前行后，点击对话框最上方的【下载】按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在弹出的版本选择中，点开下拉框选择最新版，&lt;strong&gt;注意：latest 不一定是最新版！&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文撰写时，已有新版本1.28.1推出，所以这里一定&lt;strong&gt;不要选 latest&lt;/strong&gt;，请选择高于1.28.1的版本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_10-15-34.webp&#34; alt=&#34;Snipaste_2023-04-03_10-15-34.webp&#34;&gt;下载镜像&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_10-16-16.webp&#34; alt=&#34;Snipaste_2023-04-03_10-16-16.webp&#34;&gt;点击选择，等待 Docker 下载镜像&lt;/p&gt;
&lt;h4 id=&#34;使用镜像创建容器并运行&#34;&gt;&lt;a href=&#34;#使用镜像创建容器并运行&#34; class=&#34;headerlink&#34; title=&#34;使用镜像创建容器并运行&#34;&gt;&lt;/a&gt;使用镜像创建容器并运行&lt;/h4&gt;&lt;p&gt;若这是你第一次使用docker，我建议你在群晖的共享文件夹中创建一个单独的文件给docker，步骤为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击 NAS 主菜单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 控制面板&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 共享文件夹&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击 新增&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;名称输入：docker，所在位置建议选择主存储池&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;下一步，直到应用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你已经有一个docker文件夹作为共享文件夹时，可以继续往下操作。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开 FileStation，在 docker 文件夹中新建一个子文件夹：Bitwarden&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开 Docker 应用，点击左侧容器，然后点击新增&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在弹出的窗口中选择我们刚刚下载好的镜像，点击下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在弹出的窗口中确认已勾选“使用已选择的网络”，bridge，确认后，点击下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在弹出的窗口中继续点击下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在端口设置处的80端口的左侧填18080（如果你知道这里意味着什么，那你可以随便填，比如28080、9090、18580，如果你不懂这个含义是什么，那就填18080）3012可以留空，不用填，继续下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在存储空间设置中点击新建文件夹，在弹出的窗口中选择我们刚刚创建的 docker&amp;#x2F;bitwarden 文件夹，在右侧装在路径填：&amp;#x2F;data，点击下一步&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击创建容器&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为什么需要在端口处设置端口转发和文件夹映射？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Docker 是一个虚拟机容器，我们创建的容器的运行环境跟 NAS 本机的运行环境完全隔离，所以容器中的服务通过端口提供的服务需要使用一个端口映射出来我们才能进行访问，如果这里不填，Docker 会自动随机一个当前系统尚未使用的端口，这对我们后期对端口服务进行二次转发是较为麻烦的，所以在此处进行指定；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因为 Docker 创建的每一个容器的环境都相互隔离，所以当容器删除之后，容器中的数据也就随之消失了，而我们每次升级或调整容器时都会有可能重新创建这个容器，为了保证容器中的数据不会丢失，在这里通过文件夹映射的功能把容器中的数据映射到我们外部文件夹，这样即使容器删除了，我们的数据依旧得以保留，下次重新创建容器的时候重新关联一下文件即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_14-58-05.webp&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_14-59-57.webp&#34;&gt;选择你刚刚下载的镜像文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_15-17-33.webp&#34;&gt;设置端口映射&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_15-18-20.webp&#34;&gt;设置文件夹映射&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-03_15-18-36.webp&#34;&gt;点击完成&lt;/p&gt;
&lt;p&gt;至此，你就拥有一个属于你自己的密码管理服务了，你的所有密码都将保存到这里，除了你，谁都无法看到你保存的密码是什么，非常安全。&lt;/p&gt;
&lt;p&gt;但先别高兴太早，NAS 作为一个局域网设备，他现在只能发挥非常有限的作用，我们需要进一步完善它的网络连接来实现一个完全体的 Bitwarden。&lt;/p&gt;
&lt;p&gt;如果你仅仅只想体验一下这个服务，也可以先在内网环境下使用，打开浏览器，输入http:&amp;#x2F;&amp;#x2F;把这里替换成你的 NAS 的内网 IP 地址:18080，进行简单设置后，就可以跳转到【实际使用体验】&lt;/p&gt;
&lt;p&gt;在此之前，我需要向完全没有网络基础的同学介绍一下为什么需要这一步，已经掌握这部分知识的可以直接跳转下一章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/HD.webp&#34; alt=&#34;HD.webp&#34;&gt;公网和私网的关系&lt;/p&gt;
&lt;p&gt;简单来讲，我们当前的互联网网络环境分为两大部分：内网和外网。外网为我们提供互联网服务，内网用来接入外网，然后使用外网的互联网服务。&lt;/p&gt;
&lt;p&gt;听起来好像有点儿生涩，但这就意味着：如果你想要使用某个互联网服务，那你必须要与这个服务处于同一个网络环境中。大概有以下三种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一般意义上的互联网服务在外网可以访问，正常情况下，你在内网，那如果你要访问外网，就需要从内网转换到外网，我们平时用的4G蜂窝网，WiFi 等帮你实现了这个功能；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当互联网服务在外网，你也在外网（一般情况下，当你使用4G蜂窝网络时，会被供应商临时分配到外网环境下），那也是可以直接访问的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当互联网服务在内网，你也在内网时（很多电脑手机互传的服务就是基于这一环境），那是可以直接访问的；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你手持使用设备在外网，而互联网服务在内网；或者说你在一个内网，互联网服务在另外一个内网；那你就无法访问到内网中的互联网服务了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一般互联网服务：抖音、微博、微信、QQ、百度，这些互联网公司都在公网部署有自己的互联网服务，也是因为这些互联网服务的部署，你手中的 App 才能正常地运行和使用。&lt;/p&gt;
&lt;p&gt;我们刚刚部署的 Bitwarden 就是第四种情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_09-52-52.webp&#34; alt=&#34;Snipaste_2023-04-04_09-52-52.webp&#34;&gt;对你来说，是找一颗星星容易，还是找沙漠中的一颗砂砾容易呢（图片来自 unsplash）&lt;/p&gt;
&lt;p&gt;我相信你还是可能不理解，那我们把当前的公网比作星空，互联网服务比作星空中的星星，把你自己比作沙漠中的砂砾（个人上网用户繁多）&lt;/p&gt;
&lt;p&gt;你去星空中找某一颗星星，只需要抬头，寻找星星的参照物（例如把北斗七星作为参照），然后找到它即可。&lt;/p&gt;
&lt;p&gt;但如果你是一颗星星，如何找到地球上某个沙漠中的一个特定的砂砾呢？这几乎不可能。&lt;/p&gt;
&lt;p&gt;我们刚刚在 Docker 中部署的那个镜像，就为我们提供了互联网服务，如果你把 NAS 放置在家中，那当你在家时，就相当于沙漠中的两个挨着的砂砾，很容易就找到对方了。但若你出门了（去星空里了），再让你找那颗特定的砂砾，就没那么容易了。同样的，假如你去了别人家，连入了别人的 WiFi（进入到了另一个沙漠），那你也无法找到最开始跟你相邻的那个砂砾了。&lt;/p&gt;
&lt;p&gt;这个时候，如果我们可以从砂砾上牵一根线，绑到某一个星星上，这样当我们需要找到特定的砂砾的时候，只需要找到某颗星星，然后顺着星星上绑着的线，就可以找到我们想要的那颗砂砾了。&lt;/p&gt;
&lt;p&gt;接下来，我将会简单介绍一下你应该如何绑这根线（Frp）。&lt;/p&gt;
&lt;h3 id=&#34;设置外网访问&#34;&gt;&lt;a href=&#34;#设置外网访问&#34; class=&#34;headerlink&#34; title=&#34;设置外网访问&#34;&gt;&lt;/a&gt;设置外网访问&lt;/h3&gt;&lt;h4 id=&#34;你有两种方式设置外网访问&#34;&gt;&lt;a href=&#34;#你有两种方式设置外网访问&#34; class=&#34;headerlink&#34; title=&#34;你有两种方式设置外网访问&#34;&gt;&lt;/a&gt;你有两种方式设置外网访问&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过购买云服务器获取固定公网 IP 地址，然后通过 Frp 穿透到自己的 NAS （租一颗天上的星星，牵线到自己 NAS）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过自己的宽带账号获取静态或动态公网 IP 地址，然后在路由器上做端口映射 （搞一颗星星放自己家）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;搞一颗星星放自己家！？听起来很酷炫不是嘛～&lt;/p&gt;
&lt;p&gt;相比较而言，第二种方式也确实是更加简单直接，也相比较省成本的方案。但它有一个致命的问题：能不能拿到公网IP地址，你说了不算，得你所在的宽带公司说了算，而大部分时间里，宽带公司都不会给你这个 IP ……（至少我没有）&lt;/p&gt;
&lt;p&gt;所以很多需要公网IP的同学仍旧选择了第一种方案：购置云服务器。&lt;/p&gt;
&lt;p&gt;如有需要，请打开搜索引擎搜索：群晖 docker frp，此处不再赘述。&lt;/p&gt;
&lt;p&gt;另外，为了后期运维方便，我非常建议你使用域名而不是公网IP来使用自己的服务，请自行搜索域名购买，不再赘述。&lt;/p&gt;
&lt;p&gt;域名有很多显而易见的好处：&lt;br&gt;减少你不需要修改（一旦更换云服务器，所有使用 Bitwarden 服务的地方都要重新修改服务地址）&lt;/p&gt;
&lt;p&gt;更好记，就像少数派网站：sspai.com 跟 119.23.141.248 ，你觉得哪个更好记呢？&lt;/p&gt;
&lt;p&gt;如果你坚持到了这一步，那恭喜你！！！&lt;/p&gt;
&lt;p&gt;你已经成功了一半了。&lt;/p&gt;
&lt;p&gt;为什么这么说？&lt;/p&gt;
&lt;p&gt;因为为了我们服务在公网上的绝对安全，你还需要为这个服务设置 Https 加密。&lt;/p&gt;
&lt;p&gt;tips：你需要先为自己的域名（或固定公网IP地址）申请 ssl 证书，群晖 NAS 有非常方便的证书导入功能，申请好的证书可以通过以下方式导入&lt;/p&gt;
&lt;p&gt;打开控制面板 -&amp;gt; 安全性 -&amp;gt; 证书 -&amp;gt; 新增&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_09-59-11.webp&#34; alt=&#34;Snipaste_2023-04-04_09-59-11.webp&#34;&gt;导入你的ssl证书&lt;/p&gt;
&lt;h4 id=&#34;将-http-转换成-https&#34;&gt;&lt;a href=&#34;#将-http-转换成-https&#34; class=&#34;headerlink&#34; title=&#34;将 http 转换成 https&#34;&gt;&lt;/a&gt;将 http 转换成 https&lt;/h4&gt;&lt;p&gt;简单理解的话，http 情况下，你在外网访问到家里的 NAS 的密码保管服务时，互联网世界的黑客就有机会将 http 劫持并查看传输内容，也就是说，你的密码又变的不安全了！&lt;/p&gt;
&lt;p&gt;这时候我们就需要 Https 协议，有了它，每次传输的内容都是加密的，黑客是劫持不了的，同时传输内容也是加密的，他们（黑客）即使用手段找到了你传输的信息，也看不明白传输的内容是什么。&lt;/p&gt;
&lt;p&gt;正所谓行百里者半九十，这一步&lt;strong&gt;非常重要&lt;/strong&gt;，如果 https 协议没有设置就用的话，那我们前边所有的努力就都白费了。&lt;/p&gt;
&lt;p&gt;假设你通过 frp 内网穿透到 NAS 的端口是9999 （云服务器上端口随便，NAS上的端口是9999）&lt;/p&gt;
&lt;p&gt;此时9999的协议仍是http，请继续操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开控制面板 -&amp;gt; 登录门户 -&amp;gt; 高级 -&amp;gt; 反向代理服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击新增，名称随便填，为了好记可以写：bitwarden，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;来源：协议选 https，主机名称填写你的域名，端口填9999，勾选【启用 HSTS】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目的地：协议 http，主机名：127.0.0.1，端口：18080（参考上方部署时所设置的 Bitwarden 端口号）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击确定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开控制面板 -&amp;gt; 安全性 -&amp;gt; 证书 -&amp;gt; 设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;找到服务中所有包含你域名或者公网 IP 的服务，将右侧证书修改为你自己的域名或公网 IP 证书，点击确定&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_10-03-18-txsg.webp&#34;&gt;设置反向代理，将http链接升级为更安全的Https&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_10-06-07.webp&#34;&gt;为你的反向代理域名设置证书&lt;/p&gt;
&lt;p&gt;如果一切正常的话，现在你就可以访问https:&amp;#x2F;&amp;#x2F;你的域名:9999来真正设置你最开始部署的 Bitwarden 了。&lt;/p&gt;
&lt;p&gt;恭喜你 🎉🎉🎉 ，You made it ！&lt;/p&gt;
&lt;h2 id=&#34;实际使用体验&#34;&gt;&lt;a href=&#34;#实际使用体验&#34; class=&#34;headerlink&#34; title=&#34;实际使用体验&#34;&gt;&lt;/a&gt;实际使用体验&lt;/h2&gt;&lt;p&gt;以下就是非常舒适的使用体验了，不涉及任何部署相关的流程了，请放心食用。&lt;/p&gt;
&lt;h4 id=&#34;PC端浏览器体验&#34;&gt;&lt;a href=&#34;#PC端浏览器体验&#34; class=&#34;headerlink&#34; title=&#34;PC端浏览器体验&#34;&gt;&lt;/a&gt;PC端浏览器体验&lt;/h4&gt;&lt;p&gt;第一次打开该网址时，会让你设置登陆账号跟密码，正常输入即可，输入后你就可以正常使用了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_10-12-25.webp&#34; alt=&#34;Snipaste_2023-04-04_10-12-25.webp&#34;&gt;网页端设置界面&lt;/p&gt;
&lt;p&gt;第一次登陆某个网站的时候，因为你密码库是空的，所以它仍需要你手动输入账号跟密码，但当你输入一次后，Bitwarden 会检测当前的表单值，并提示你是否要将当前的账号和密码保存到密码库&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_10-20-59.webp&#34; alt=&#34;Snipaste_2023-04-04_10-20-59.webp&#34;&gt;输入正确了再保存~&lt;/p&gt;
&lt;p&gt;也就是说它会根据你的使用时间不断进化，到后期越来越强大。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_10-14-54.webp&#34; alt=&#34;Snipaste_2023-04-04_10-14-54.webp&#34;&gt;登录时，双击 Bitwarden 的推荐项目，密码就会自动填充到网页&lt;/p&gt;
&lt;p&gt;当然，如果你希望提前在密码库把自己还记得的密码都填进去，下次在登录网站的时候直接用，也是可以的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-04_10-15-47.webp&#34; alt=&#34;Snipaste_2023-04-04_10-15-47.webp&#34;&gt;新增一个账号和密码项&lt;/p&gt;
&lt;h4 id=&#34;iPhone-体验&#34;&gt;&lt;a href=&#34;#iPhone-体验&#34; class=&#34;headerlink&#34; title=&#34;iPhone 体验&#34;&gt;&lt;/a&gt;iPhone 体验&lt;/h4&gt;&lt;p&gt;第一次在手机上使用 Bitwarden 时需要进行初始化设置，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开软件，在登录界面点击右上角齿轮按钮&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在设置界面修改服务器 URL 为你自己刚刚映射的 Https 地址，点击保存（如果你打算用官方的服务，此处可以不用管）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;回到登录界面登陆，账号是你第一次设置 Bitwarden 时输入的账号和密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;登录成功后，你的密码库可能是空，也可能已经同步了你在网页端添加的密码库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开手机设置，找到【密码】选项，并在二级菜单中选择【密码选项】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开自动填充密码，并将 Bitwarden 勾选上&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在任何网页或者 App 的输入过程中，点击【密码】按钮，在弹出的应用中选择 Bitwarden 填充&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Full%20HD-xcpl.webp&#34; alt=&#34;Full HD-xcpl.webp&#34;&gt;iPhone设置步骤参考&lt;/p&gt;
&lt;p&gt;至此，你就可以完全使用自己托管的密码库服务啦。&lt;/p&gt;
&lt;p&gt;tips：在iOS上，Bitwarden 需要使用通知推送功能来自动后台同步你的密码数据，你需要打开 Bitwarden 的推送功能才能保证 App 在后台的密码同步，如果关闭后，Bitwarden 只能在你每次打开 App 的时候才能触发同步，体验不佳，所以强烈建议你开启通知推送功能，这只是 iOS 的同步策略需要，不会给你的手机推送奇奇怪怪的东西。&lt;/p&gt;
&lt;h4 id=&#34;Android体验&#34;&gt;&lt;a href=&#34;#Android体验&#34; class=&#34;headerlink&#34; title=&#34;Android体验&#34;&gt;&lt;/a&gt;Android体验&lt;/h4&gt;&lt;p&gt;安卓手机相比较 iOS，缺少了钥匙串这个功能，但你仍旧可以在辅助功能里开启自动填充。&lt;/p&gt;
&lt;p&gt;我使用的安卓手机是小米13，自动填充服务在：更多设置 -&amp;gt; 语言与输入法 -&amp;gt; 自动填充服务&lt;/p&gt;
&lt;p&gt;为了保证 App 在后台自动同步而不是每次使用都要打开App手动同步，你也要在安卓手机上设置 App 的省电策略为【无限制】。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/Snipaste_2023-04-18_15-20-44.webp&#34; alt=&#34;Snipaste_2023-04-18_15-20-44.webp&#34;&gt;App 使用体验&lt;/p&gt;
&lt;p&gt;友情提示：有些 App 的登录界面不是标准的表单结构，所以不一定会触发 Bitwarden 的自动填充，可以先尝试输入密码，这个时候 Bitwarden 可能会因为检测到密码输入框而自动弹出。&lt;/p&gt;
&lt;p&gt;Bitwarden 实际上还支持命令行和 Linux 系统的自动填充，但考虑到用户的动手能力，我相信使用命令行和Linux的用户应该不需要我介绍了吧，哈哈哈哈。&lt;/p&gt;
&lt;h2 id=&#34;附言&#34;&gt;&lt;a href=&#34;#附言&#34; class=&#34;headerlink&#34; title=&#34;附言&#34;&gt;&lt;/a&gt;附言&lt;/h2&gt;&lt;p&gt;事实上，我写到这里之后开始扪心自问：我真的有必要做到这一步吗？就像个正常人一样用官方的服务不好吗？&lt;/p&gt;
&lt;p&gt;不好。&lt;/p&gt;
&lt;p&gt;这种可以把自己的安全牢牢掌握在自己手上的快感，会上瘾。&lt;/p&gt;
&lt;p&gt;做少数派中的少数派，更上瘾。&lt;/p&gt;
</content>
        <category term="程序员" />
        <category term="NAS" />
        <category term="网络" />
        <category term="安全" />
        <updated>2023-04-06T20:28:38.000Z</updated>
    </entry>
    <entry>
        <id>https://blog.gadore.top/archives/1677915050714/</id>
        <title>我Hack了一个蓝牙墨水屏，还挺好玩 (长期置顶)</title>
        <link rel="alternate" href="https://blog.gadore.top/archives/1677915050714/"/>
        <content type="html">&lt;p&gt;少数派首发&lt;/p&gt;
&lt;p&gt;我为什么要买墨水屏产品&lt;br&gt;事情的起因是这样的，一年前，社交媒体上就已经有很多技术宅在自己玩一些微雪的墨水屏了，看着他们又是焊板子又是PCB的真的是馋死我了。&lt;/p&gt;
&lt;p&gt;但苦于自己是软件出身，没有一点硬件的底子，我就在想，能不能买一个现成的，然后自己再慢慢地去分析原理。&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;于是我就持巨资买了两块超市用的价签，一块65，带支架，有App控制，可以批量添加。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-zglb-dppx.webp&#34; alt=&#34;现在居然还涨价了。。。&#34;&gt;&lt;br&gt;现在居然还涨价了。。。&lt;/p&gt;
&lt;p&gt;然后我拆了其中一块想试下能不能用我树莓派的视频输出去控制它。&lt;/p&gt;
&lt;p&gt;然后。。。就悲剧了。&lt;/p&gt;
&lt;p&gt;我发现这玩意儿的排线跟树莓派根本就不兼容。。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-eosd-rxjp-nuvf.webp&#34; alt=&#34;被我拆掉的尸体，组装回去还能用，但我发现我没法用树莓派去接线驱动&#34;&gt;&lt;br&gt;被我拆掉的尸体，组装回去还能用，但我发现我没法用树莓派去接线驱动&lt;/p&gt;
&lt;p&gt;66块钱就这么没了！！&lt;/p&gt;
&lt;p&gt;还有另一块作为我的备用方案一直躺在箱子里待了半年多。&lt;/p&gt;
&lt;p&gt;废物再利用，另辟蹊径&lt;br&gt;直到今年年初，我NAS的硬盘被我用到了80%，然后迅雷还在卯足了劲儿在往硬盘里塞东西，我每天不得不多次打开我的管理界面去检测Nas当前还有多少余量可以用。&lt;/p&gt;
&lt;p&gt;然后我就想到了它，墨水屏，这东西显示的时候不耗电，只有刷新的时候才会用一点点电，简直就是为监控状态而生的屏幕啊。&lt;/p&gt;
&lt;p&gt;所以我就又下定了决心去想驱动它的办法。&lt;/p&gt;
&lt;p&gt;上次用硬件驱动的路子走不通了，学习成本过高。我开始另辟蹊径，往软件驱动上靠：我能不能去找到控制它刷新的协议呢？&lt;/p&gt;
&lt;p&gt;答案是肯定的。&lt;/p&gt;
&lt;p&gt;这类墨水屏走的都是低功耗蓝牙控制的路子，手机蓝牙发送数据都是可以通过logcat这个工具进行抓包，说干就干。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-fzlx-bmwp.webp&#34; alt=&#34;这是logcat抓取的所有的手机运行日志&#34;&gt;&lt;br&gt;这是logcat抓取的所有的手机运行日志&lt;/p&gt;
&lt;p&gt;显然有很多是我们不需要的信息，这严重干扰了我的分析工作，那就加一个过滤条件，只接受蓝牙相关的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-yijd-rcmn-nrqm.webp&#34; alt=&#34;还是看不出什么内容，只是很不相关的日志输出&#34;&gt;&lt;br&gt;还是看不出什么内容，只是很不相关的日志输出&lt;/p&gt;
&lt;p&gt;只能根据时间节点一点点翻logcat日志了，此时我发现一个值得关注的信息，在蓝牙发送的那段时间的日志中，有一个非常规律的，也很像有点儿内容的写命令&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-qedh-eiwd-pzkk.webp&#34; alt=&#34;识别度AAAA！！！&#34;&gt;&lt;br&gt;识别度AAAA！！！&lt;/p&gt;
&lt;p&gt;于是我就把这个关键字作为单独的日志过滤条件重新进行了一次抓包，事情突然就明朗了，这就是蓝牙墨水屏的手机App控制墨水屏的协议，而且协议的内容也非常容易理解&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-jlrd-hial-pnub.webp&#34; alt=&#34;纵向看，注意到那个01 02 03 04 05 06 了嘛？&#34;&gt;&lt;br&gt;纵向看，注意到那个01 02 03 04 05 06 了嘛？&lt;/p&gt;
&lt;p&gt;为了信息发送的稳定性，开发者把这个屏幕的发送信息切成了一段一段的内容，分开发给蓝牙墨水屏屏幕，然后在发送结束后，再发送命令给墨水屏统一控制刷新一次，这样就完成了屏幕的刷新，接下来我详细分析一下我对这段协议的理解。&lt;/p&gt;
&lt;p&gt;报文分析，找到协议规律&lt;br&gt;可以参考上边的报文内容，并结合当前的分析内容看。&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;01-25 17:11:24.844 25455 25455 E write: total=1,13 01 b4 ff ……ff ff 4c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是蓝牙发送协议的内容部分，报文的起始内容是13 01 b4 ff ……ff ff 4c&lt;/p&gt;
&lt;p&gt;13：命令字，标识当前的内容是显示内容，对应到墨水屏的显示控制部分的地址&lt;/p&gt;
&lt;p&gt;01：报文顺序，通过上边截图（竖着看），也能看出，开发者是把屏幕的内容切割成一段一段分开发给屏幕的&lt;/p&gt;
&lt;p&gt;b4：16进制数字，代表180，数一下b4后边的报文也就是180 + 1的长度，这个+1看下边说明&lt;/p&gt;
&lt;p&gt;4c：校验位，防止当前这段报文在传输过程中有内容没收到或者传输错误，所以增加一个校验位，来保证当前报文是&lt;/p&gt;
&lt;p&gt;ff：报文内容，这个下边再细说。&lt;/p&gt;
&lt;p&gt;这种报文一共出现了26次，第二十七次有一点不同&lt;/p&gt;
&lt;p&gt;01-25 17:11:34.142 25455 25455 E write: total&amp;#x3D;1,13 1b 38 ff ……ff ff c8&lt;br&gt;可以看到，除了长度以外，报文的规则仍然符合我们上述的分析。&lt;/p&gt;
&lt;p&gt;那么我们现在就可以来总结一下这个命令字0x13的所有内容了：&lt;/p&gt;
&lt;p&gt;180&lt;em&gt;26+56 &amp;#x3D; 4736 &amp;#x3D; 296&lt;/em&gt;16&lt;/p&gt;
&lt;p&gt;已知的情况是：我们的墨水屏屏幕分辨率为296&lt;em&gt;128，128 &amp;#x3D; 16&lt;/em&gt;8&lt;/p&gt;
&lt;p&gt;那缺失的这个系数8哪去了呢？&lt;/p&gt;
&lt;p&gt;我们知道，ff是16进制数，&lt;/p&gt;
&lt;p&gt;换算为10进制是255，&lt;/p&gt;
&lt;p&gt;换算为2进制是11111111&lt;/p&gt;
&lt;p&gt;诶？11111111，这不正好是8个长度位吗？&lt;/p&gt;
&lt;p&gt;事情开始明了了，&lt;/p&gt;
&lt;p&gt;一个ff数据，二进制形式下是11111111，通过1和0来区分墨水屏的黑色和白色状态，进而可以控制八个墨水屏像素。&lt;/p&gt;
&lt;p&gt;那我们的等式180&lt;em&gt;26+56 &amp;#x3D; 4736 &amp;#x3D; 296&lt;/em&gt;16 * 8 &amp;#x3D; 296*128就正式成立了！！！&lt;/p&gt;
&lt;p&gt;因为我买的是三色显示，所以除了显示黑白，这个屏幕还可以显示红色，红色报文的控制跟上述类似，只是命令字不通，就不再赘述。&lt;/p&gt;
&lt;p&gt;新的问题，蓝牙连接&lt;br&gt;搞定了这块屏幕的控制协议，接下来就是怎么把协议发过去了。到了这一阶段就彻底没有可能通过报文分析，只能盲猜了。&lt;/p&gt;
&lt;p&gt;我查了一些低功耗蓝牙的连接资料，同时一步一步地写代码来测试，最终还是摸索到了连接蓝牙并发送的方法了&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onCharacteristicFound&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;_error, services, _characteristics&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; characteristic = services[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].&lt;span class=&#34;property&#34;&gt;characteristics&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      characteristic.&lt;span class=&#34;title function_&#34;&gt;once&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;notify&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;state&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123; &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;notify: &amp;#x27;&lt;/span&gt; + state) &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      characteristic.&lt;span class=&#34;title function_&#34;&gt;once&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;write&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123; &amp;#125;, &lt;span class=&#34;function&#34;&gt;(&lt;span class=&#34;params&#34;&gt;res&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                             &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;write get response: &amp;#x27;&lt;/span&gt; + res)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;built_in&#34;&gt;setTimeout&lt;/span&gt;(&lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;title function_&#34;&gt;sendData&lt;/span&gt;(characteristic)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;, &lt;span class=&#34;number&#34;&gt;250&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;onDescover&lt;/span&gt; = (&lt;span class=&#34;params&#34;&gt;peripheral&lt;/span&gt;) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;searning...&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (peripheral.&lt;span class=&#34;property&#34;&gt;connectable&lt;/span&gt; === &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt; &amp;amp;&amp;amp; peripheral.&lt;span class=&#34;property&#34;&gt;state&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;disconnected&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (peripheral.&lt;span class=&#34;property&#34;&gt;advertisement&lt;/span&gt;.&lt;span class=&#34;property&#34;&gt;localName&lt;/span&gt; === &lt;span class=&#34;string&#34;&gt;&amp;#x27;你的蓝牙设备识别码&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &lt;span class=&#34;title function_&#34;&gt;stopScanning&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  currentDevice = peripheral&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  peripheral.&lt;span class=&#34;title function_&#34;&gt;once&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;connect&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Connected !!! &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        peripheral.&lt;span class=&#34;title function_&#34;&gt;discoverSomeServicesAndCharacteristics&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    [&lt;span class=&#34;string&#34;&gt;&amp;#x27;服务特征码1&amp;#x27;&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    [&lt;span class=&#34;string&#34;&gt;&amp;#x27;服务特征码2&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                    onCharacteristicFound);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  peripheral.&lt;span class=&#34;title function_&#34;&gt;once&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;disconnect&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;function&#34;&gt;() =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        &lt;span class=&#34;title function_&#34;&gt;log&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;disconnected !!! &amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  peripheral.&lt;span class=&#34;title function_&#34;&gt;connect&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;以上代码就是搜索蓝牙、连接蓝牙、连接服务、发送数据的全部代码了，当然，完整的项目代码晚点我也会上传github，欢迎大家多多Star，多多提意见。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-igpa-anwy-jvhg.webp&#34; alt=&#34;最终效果&#34;&gt;&lt;/p&gt;
&lt;p&gt;屏幕其实挺小的，2.9寸&lt;/p&gt;
&lt;p&gt;在这块小屏幕上，分别展示了&lt;/p&gt;
&lt;p&gt;1、我的Nas的两块存储池的使用情况&lt;/p&gt;
&lt;p&gt;2、Nas的cpu、内存占用情况&lt;/p&gt;
&lt;p&gt;3、树莓派的内存状态&lt;/p&gt;
&lt;p&gt;4、树莓派的CPU状态&lt;/p&gt;
&lt;p&gt;5、当前信息的刷新时间&lt;/p&gt;
&lt;p&gt;不多，但是也够用了。&lt;/p&gt;
&lt;p&gt;其实在代码上我还有一些内容忘记聊了，关于显示内容的控制。&lt;/p&gt;
&lt;p&gt;上边的信息看起来挺简单的，但把它换算成一个一个像素点其实还是蛮复杂的，需要分析字库字形、图形缩放等等，时间成本过高。&lt;/p&gt;
&lt;p&gt;我突然想到了canvas，canvas就是一个可以定制显示画布像素的完美工具，而且在上边可以做几乎任何事情，说干就干，我把需要显示的内容通过canvas绘制出来，然后再转换成一个一个的像素信息，然后再通过黑白红颜色的RGB值来决定最终发送的报文信息，搞定！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/upload/image-jgup-bsod-tlyy.webp&#34; alt=&#34;Nas是个好东西&#34;&gt;&lt;/p&gt;
&lt;p&gt;我把这个程序跑在我的树莓派上，然后Nas上设置了一个定时任务，每隔一段时间就推送信息到树莓派上，然后树莓派再通过蓝牙把信息发送给墨水屏。&lt;/p&gt;
&lt;p&gt;这感觉，才叫自动化啊 😄 😄 😄&lt;/p&gt;
&lt;p&gt;总结&lt;br&gt;整个项目如果从买设备开始算跨度倒还挺大的，不过此次Hack的时间倒不长，前前后后也就一两周时间，而且都是晚上下班或者用周末时间来做的。&lt;/p&gt;
&lt;p&gt;当然啦，如果是熟悉这个领域的大佬来搞，可能所用的时间更短，毕竟我还是一个小前端。哈哈哈。&lt;/p&gt;
&lt;p&gt;希望我可以保持这种Hack精神，因为这真的是太有意思了。&lt;/p&gt;
&lt;p&gt;希望大家也可以分享更多类似的经历，毕竟我知道自己在这个折腾的过程中很开心，相信大家知道了之后也会替我开心，尤其是那些想动手还没动手的人，说不定已经跃跃欲试了。&lt;/p&gt;
&lt;p&gt;毕竟我只是一名小前端嘛~&lt;/p&gt;
</content>
        <category term="程序员" />
        <category term="NAS" />
        <updated>2023-03-18T13:32:29.000Z</updated>
    </entry>
</feed>
